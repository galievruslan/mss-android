package com.mss.application;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.j256.ormlite.android.apptools.OrmLiteBaseActivity;
import com.mss.application.tasks.*;
import com.mss.infrastructure.ormlite.*;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.annotation.TargetApi;
import android.content.SharedPreferences;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.Menu;
import android.view.View;
import android.widget.CheckBox;
import android.widget.TextView;

public class SynchronizationActivity extends OrmLiteBaseActivity<DatabaseHelper> {  

    // Values for email and password at the time of the login attempt.
    private boolean mFullSync;

    // UI references.
    private CheckBox mFullSyncView;
    private TextView mLastSync;
    private View mSyncFormView;
    private View mSyncStatusView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_synchronization);
        
        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getBaseContext());
        
        // Set up the login form.
        mFullSyncView = (CheckBox) findViewById(R.id.full_synchronization_checkbox);
        mLastSync = (TextView) findViewById(R.id.last_sync_text_view);
        
        String lastSync = sharedPreferences.getString("last_sync", "");
        mLastSync.setText(lastSync);

        mSyncFormView = findViewById(R.id.sync_form);
        mSyncStatusView = findViewById(R.id.sync_status);
        mSyncStatusMessageView = (TextView) findViewById(R.id.sync_status_message);

        findViewById(R.id.synchronize_button).setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
            	try {					
					attemptSync();
				} catch (Throwable e) {
					e.printStackTrace();
				}
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        getMenuInflater().inflate(R.menu.activity_login, menu);
        return true;
    }
    
    private SharedPreferences sharedPreferences = null;
    
    public String getServerAddress(){
    	return sharedPreferences.getString("server_address", "");
    }
    
    public Date getLastSyncTime() throws ParseException{
    	String lastSync = sharedPreferences.getString("last_sync", "");
		DateFormat format = SimpleDateFormat.getTimeInstance();
		return format.parse(lastSync);
    }
    
    public void setLastSyncTime(Date time) {
    	SharedPreferences.Editor editor = sharedPreferences.edit();	
		DateFormat format = SimpleDateFormat.getTimeInstance();
		editor.putString("last_sync", format.format(time));
		editor.commit();
    }
    
    private SynchronizationTask mSyncTask = null;
    
    public void setSynchronizationTask(SynchronizationTask synchronizationTask) {
    	mSyncTask = synchronizationTask;
    } 
    
    private TextView mSyncStatusMessageView;
    
    public void setStatusMessage(Integer resId) {
    	mSyncStatusMessageView.setText(resId);
    }

    /**
     * Attempts to sign in or register the account specified by the login form.
     * If there are form errors (invalid email, missing fields, etc.), the
     * errors are presented and no actual login attempt is made.
     */
    public void attemptSync() {
        if (mSyncTask != null) {
            return;
        }
        
        mFullSyncView = (CheckBox)findViewById(R.id.full_synchronization_checkbox);
        mFullSync = mFullSyncView.isChecked();

        mSyncStatusMessageView.setText(R.string.sync_progress);
        showProgress(true);
        mSyncTask = new SynchronizationTask(this, getHelper(), mFullSync);
        mSyncTask.execute((Void) null);
    }

    /**
     * Shows the progress UI and hides the login form.
     */
    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
    public void showProgress(final boolean show) {
        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
        // for very easy animations. If available, use these APIs to fade-in
        // the progress spinner.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);

            mSyncStatusView.setVisibility(View.VISIBLE);
            mSyncStatusView.animate()
                    .setDuration(shortAnimTime)
                    .alpha(show ? 1 : 0)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                        	mSyncStatusView.setVisibility(show ? View.VISIBLE : View.GONE);
                        }
                    });

            mSyncFormView.setVisibility(View.VISIBLE);
            mSyncFormView.animate()
                    .setDuration(shortAnimTime)
                    .alpha(show ? 0 : 1)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                        	mSyncFormView.setVisibility(show ? View.GONE : View.VISIBLE);
                        }
                    });
        } else {
            // The ViewPropertyAnimator APIs are not available, so simply show
            // and hide the relevant UI components.
        	mSyncStatusView.setVisibility(show ? View.VISIBLE : View.GONE);
        	mSyncFormView.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }
}


