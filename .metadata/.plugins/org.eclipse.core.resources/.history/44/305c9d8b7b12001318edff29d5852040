package com.mss.application;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.view.MenuItem;
import com.j256.ormlite.android.apptools.OpenHelperManager;
import com.mss.application.fragments.RoutePointFragment;
import com.mss.application.fragments.RoutePointFragment.OnOrderSelectedListener;
import com.mss.domain.models.Order;
import com.mss.domain.models.Route;
import com.mss.domain.models.RoutePoint;
import com.mss.domain.services.RoutePointService;
import com.mss.domain.services.RouteService;
import com.mss.infrastructure.ormlite.DatabaseHelper;

import android.os.Bundle;
import android.content.Intent;
import android.support.v4.app.NavUtils;
import android.support.v4.app.TaskStackBuilder;
import android.util.Log;
import android.widget.TabHost;
import android.widget.TabHost.OnTabChangeListener;
import android.widget.TabHost.TabSpec;

public class RoutePointActivity extends SherlockFragmentActivity implements OnTabChangeListener, OnOrderSelectedListener {

	private static final String TAG = RoutePointActivity.class.getSimpleName();
	
	public static final String TAB_GENERAL = "General";
    public static final String TAB_DETAILS = "Details";
    private TabHost mTabHost;
    private int mCurrentTab;
    
	public static final int REQUEST_SHOW_ROUTE_POINT = 1;
	public static final long ROUTE_POINT_ID_NEW = 0;
	public static final String EXTRA_ROUTE_POINT_ID = "route_point_id";

	private DatabaseHelper mHelper;
	private RouteService mRouteService;
	private RoutePointService mRoutePointService;
	private RoutePointFragment mRoutePointFragment;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		long id = getIntent().getLongExtra(getString(R.string.key_id), ROUTE_POINT_ID_NEW);

		if (getResources().getBoolean(R.bool.dual_pane)) {
			// Let's get back to the NoteListActivity since it should show both
			// fragments at the same time
			
			Intent data = new Intent();
			data.putExtra(EXTRA_ROUTE_POINT_ID, id);
			setResult(0, data);
			finish();
		}

		mHelper = OpenHelperManager.getHelper(this, DatabaseHelper.class);
		try {
			mRouteService = new RouteService(mHelper);
			mRoutePointService = new RoutePointService(mHelper);
		} catch (Throwable e) {
			Log.e(TAG, e.getMessage());
		}
		if (id != ROUTE_POINT_ID_NEW) {			
			RoutePoint routePoint = null;
			try {
				routePoint = mRoutePointService.getById(id);
			} catch (Throwable e) {
				Log.e(TAG, e.getMessage());
			}

			mRoutePointFragment = RoutePointFragment.newInstance(routePoint);
			mRoutePointFragment.addOnOrderSelectedListener(this);
			getSupportFragmentManager().beginTransaction().replace(android.R.id.content, mRoutePointFragment).commit();						
		}
		
		mTabHost = (TabHost) findViewById(android.R.id.tabhost);
        setupTabs();
        
        mTabHost.setOnTabChangedListener(this);
        mTabHost.setCurrentTab(mCurrentTab);     
		
		if (getSupportActionBar() != null) {
			getSupportActionBar().setDisplayHomeAsUpEnabled(true);;
			getSupportActionBar().setDisplayShowTitleEnabled(false);
		}
	}
	
	private void setupTabs() {
        mTabHost.setup(); // you must call this before adding your tabs!
        mTabHost.addTab(newTab(TAB_GENERAL, R.string.label_tab_general, R.id.tab_general));
        mTabHost.addTab(newTab(TAB_DETAILS, R.string.label_tab_details, R.id.tab_details));
    }
    
    private TabSpec newTab(String tag, int labelId, int tabContentId) {
        Log.d(TAG, "buildTab(): tag=" + tag);
 
        TabSpec tabSpec = mTabHost.newTabSpec(tag);
        tabSpec.setIndicator(getString(labelId));
        tabSpec.setContent(tabContentId);
        return tabSpec;
    }
     
    @Override
    public void onTabChanged(String tabId) {
        if (TAB_GENERAL.equals(tabId)) {
            mCurrentTab = 0;
            return;
        }
        if (TAB_DETAILS.equals(tabId)) {
            mCurrentTab = 1;
            return;
        }
    }
	
	@Override
	public void onOrderSelected(Order order, int position, long id) {
		Intent intent = new Intent(this, OrderEditActivity.class);
		intent.putExtra(OrderEditActivity.KEY_ORDER_ID, id);
		startActivity(intent);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);

		switch (requestCode) {
		case RoutePointEditActivity.REQUEST_EDIT_ROUTE_POINT:
			// We are coming back from the NoteEditActivity
			RoutePoint routePoint = null;
			try {
				routePoint = mRoutePointService.getById(mRoutePointFragment.getRoutePointId());
			} catch (Throwable e) {
				e.printStackTrace();
			}

			mRoutePointFragment.updateContent(routePoint);

			break;
		default:
			break;
		}
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			// ActionBar's Home button clicked

			Intent upIntent = new Intent(this, RouteActivity.class);
			if (NavUtils.shouldUpRecreateTask(this, upIntent)) {
				TaskStackBuilder.create(this).addNextIntent(upIntent).startActivities();
				finish();
			} else {
				NavUtils.navigateUpTo(this, upIntent);
			}
			return true;
		case R.id.menu_item_edit:
			if (mRoutePointFragment != null) {
				Route route = null;
				RoutePoint routePoint = null;				
				try {
					routePoint = mRoutePointService.getById(mRoutePointFragment.getRoutePointId());
					route = mRouteService.getById(routePoint.getRouteId());
				} catch (Throwable e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}				
				
				Intent i = new Intent(this, RoutePointEditActivity.class);
				i.putExtra(getString(R.string.key_id), routePoint.getId());
				i.putExtra(RoutePointEditActivity.KEY_ROUTE_DATE, route.getDate().toString());
				startActivityForResult(i, RoutePointEditActivity.REQUEST_EDIT_ROUTE_POINT);
			}
			return true;
		case R.id.menu_item_delete:
			try {
				mRoutePointService.deletePoint(mRoutePointFragment.getRoutePoint());
			} catch (Throwable e) {
				e.printStackTrace();
			}
			finish();
		case R.id.menu_item_add:
			Intent intent = new Intent(this, OrderEditActivity.class);
			intent.putExtra(OrderEditActivity.KEY_ROUTE_POINT_ID, mRoutePointFragment.getRoutePointId());
			startActivityForResult(intent, 0);
			return true;
		default:
			return false;
		}
	}
}
