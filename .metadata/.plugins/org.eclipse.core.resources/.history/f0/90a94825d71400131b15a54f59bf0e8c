/*
 * Copyright (C) 2010 The Android Open Source Project
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package com.mss.application.services;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.accounts.AuthenticatorException;
import android.accounts.OperationCanceledException;
import android.content.AbstractThreadedSyncAdapter;
import android.content.ContentProviderClient;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SyncResult;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;

import org.apache.http.NameValuePair;
import org.apache.http.ParseException;
import org.apache.http.auth.AuthenticationException;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;

import com.mss.infrastructure.data.IEntity;
import com.mss.infrastructure.data.IRepository;
import com.mss.infrastructure.web.WebRepository;
import com.mss.infrastructure.web.dtos.Dto;
import com.mss.infrastructure.web.dtos.ISO8601Utils;
import com.mss.infrastructure.web.dtos.translators.Translator;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * SyncAdapter implementation for syncing sample SyncAdapter contacts to the
 * platform ContactOperations provider.
 */
public class SynchronizationAdapter extends AbstractThreadedSyncAdapter {
    private static final String TAG = "SyncAdapter";

    private final AccountManager mAccountManager;
    private final Context mContext;

    private Date mLastUpdated;

    public SynchronizationAdapter(Context context, boolean autoInitialize) {
        super(context, autoInitialize);
        mContext = context;
        mAccountManager = AccountManager.get(context);
    }

    @Override
    public void onPerformSync(Account account, Bundle extras, String authority,
        ContentProviderClient provider, SyncResult syncResult) {
        //String authtoken = null;
         try {
             // use the account manager to request the credentials
        	 String authtoken =
                mAccountManager.blockingGetAuthToken(account,
                    Constants.AUTHTOKEN_TYPE, true /* notifyAuthFailure */);

             SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(mContext);        
             String server = sharedPreferences.getString("server_address", "");
             server = "";
             //users =
            //    NetworHelpers.fetchFriendUpdates(server, account, authtoken,
            //        mLastUpdated);
            // update the last synced date.
            //mLastUpdated = new Date();
            // update platform contacts.
            //Log.d(TAG, "Calling contactManager's sync contacts");
            //ContactManager.syncContacts(mContext, account.name, users);
            // fetch and update status messages for all the synced users.
            //statuses = NetworkUtilities.fetchFriendStatuses(account, authtoken);
            //ContactManager.insertStatuses(mContext, account.name, statuses);
        } catch (final AuthenticatorException e) {
            syncResult.stats.numParseExceptions++;
            Log.e(TAG, "AuthenticatorException", e);
        } catch (final OperationCanceledException e) {
            Log.e(TAG, "OperationCanceledExcetpion", e);
        } catch (final IOException e) {
            Log.e(TAG, "IOException", e);
            syncResult.stats.numIoExceptions++;
        } catch (final ParseException e) {
            syncResult.stats.numParseExceptions++;
            Log.e(TAG, "ParseException", e);
        }
    }
    
    private <TDto extends Dto, TModel extends IEntity> void Sync(
    		WebRepository<TDto> webRepo, 
    		IRepository<TModel> modelRepo, 
    		Translator<TDto, TModel> translator, 
    		Date lastSync, 
    		Integer pageSize) throws Throwable {
		Integer pageNo = 1;
		
		List<TDto> dtos;
			
		do {
			List<NameValuePair> params = new ArrayList<NameValuePair>();
			params.add(new BasicNameValuePair("page", pageNo.toString()));
			params.add(new BasicNameValuePair("page_size", pageSize.toString()));
			if (lastSync != null) {
				params.add(new BasicNameValuePair("updated_at", ISO8601Utils.format(lastSync)));
			}
				
			dtos = webRepo.find(params);
			for (TDto dto : dtos) {
				if (!dto.getIsValid()) {
					TModel invalidModel = modelRepo.getById(dto.getId());
					if (invalidModel != null)
						modelRepo.delete(invalidModel);
				}					
			
				modelRepo.save(translator.Translate(dto));			
			}
				
			pageNo ++;
		}
		while (dtos.size() == pageSize);
	}
}
