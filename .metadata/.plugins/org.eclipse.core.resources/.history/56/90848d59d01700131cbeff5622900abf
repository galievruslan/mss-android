package com.mss.domain.services;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import com.mss.domain.models.Route;
import com.mss.domain.models.RoutePoint;
import com.mss.domain.models.RoutePointTemplate;
import com.mss.domain.models.RouteTemplate;
import com.mss.domain.models.Week;
import com.mss.infrastructure.ormlite.DatabaseHelper;
import com.mss.infrastructure.ormlite.OrmliteRoutePointRepository;
import com.mss.infrastructure.ormlite.OrmliteRoutePointTemplateRepository;
import com.mss.infrastructure.ormlite.OrmliteRouteRepository;
import com.mss.infrastructure.ormlite.OrmliteRouteTemplateRepository;

public class RouteService {
	
	private DatabaseHelper databaseHelper;
	private OrmliteRouteRepository routeRepo;
	private OrmliteRoutePointRepository routePointRepo;
	private OrmliteRouteTemplateRepository routeTemplateRepo;
	private OrmliteRoutePointTemplateRepository routePointTemplateRepo;
	public RouteService(DatabaseHelper databaseHelper) throws Throwable{
		this.databaseHelper = databaseHelper;
		routeRepo = new OrmliteRouteRepository(this.databaseHelper);
		routePointRepo = new OrmliteRoutePointRepository(this.databaseHelper);
		routeTemplateRepo = new OrmliteRouteTemplateRepository(this.databaseHelper);
		routePointTemplateRepo = new OrmliteRoutePointTemplateRepository(this.databaseHelper);
	}
	
	public Route getById(long id) throws Throwable {
		return routeRepo.getById(id);
	}
	
	public Route getOnDate(Date date) throws Throwable{
		Date dateOnly = new Date(date.getYear(), date.getMonth(), date.getDate());
		
		Iterator<Route> iterator = routeRepo.findByDate(dateOnly).iterator();
		if (iterator.hasNext())
			return iterator.next();
		
		return null;
	}
	
	public Route createRoute(Date date) {
		Date dateOnly = new Date(date.getYear(), date.getMonth(), date.getDate());		
		return new Route(dateOnly);
	}
	
	public Route copyRouteFromTemplate(Date date) {
		int dayOfWeek = date.getDay();
		RouteTemplate routeTemplate = routeTemplateRepo.findByDayOfWeek(dayOfWeek);
		Iterable<RoutePointTemplate> routePointTemplates;
		if (routeTemplate != null) {
			routePointTemplates = routePointTemplateRepo.findByRouteTemplateId(routeTemplate.getId());
		} else {
			routePointTemplates = new ArrayList<RoutePointTemplate>();
		}
		
		Route route = getOnDate(date);
		if (route != null) {
			route = createRoute(date);
			saveRoute(route);
		}
		
		Iterable<RoutePoint> routePoints = routePointRepo.findByRouteId(route.getId());
		for (RoutePointTemplate routePointTemplate : routePointTemplates) {
			
			boolean alreadyExist = false;
			for (RoutePoint routePoint : routePoints) {								
				if (routePoint.getShippingAddressId() == routePointTemplate.getShippingAddressId()) {
					alreadyExist = true;
				}
			}
			
			if (!alreadyExist) {
				RoutePoint routePoint = new RoutePoint(route, shippingAddress, status)
			}
		}
		
		return new Route(dateOnly);
	}
	
	public void saveRoute(Route route) throws Throwable{
		routeRepo.save(route);
	}
}
