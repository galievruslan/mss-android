package com.mss.application;

import java.util.Date;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.view.MenuItem;
import com.j256.ormlite.android.apptools.OpenHelperManager;
import com.mss.domain.models.Customer;
import com.mss.domain.models.Order;
import com.mss.domain.models.RoutePoint;
import com.mss.domain.models.ShippingAddress;
import com.mss.domain.services.CustomerService;
import com.mss.domain.services.RoutePointService;
import com.mss.domain.services.ShippingAddressService;
import com.mss.infrastructure.ormlite.DatabaseHelper;
import com.mss.utils.IterableHelpers;

import android.os.Bundle;
import android.content.Intent;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.app.NavUtils;
import android.support.v4.app.TaskStackBuilder;
import android.support.v4.content.Loader;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

public class OrderEditActivity extends SherlockFragmentActivity implements LoaderCallbacks<Order> {

	private static final String TAG = OrderEditActivity.class.getSimpleName();

	public static final int REQUEST_EDIT_ORDER = 5;
	public static final String KEY_ORDER_ID = "id";
	public static final String KEY_ROUTE_POINT = "route_point_id";
	public static final int LOADER_ID_ORDER = 0;
	
	static final int PICK_PRICE_LIST_REQUEST = 1;
	static final int PICK_WAREHOUSE_REQUEST = 2;
	static final int PICK_PRODUCTS_REQUEST = 3;

	private long mRoutePointId;
	private Order mOrder;
	private EditText mCustomer;
	private EditText mShippinAddress;

	private DatabaseHelper mHelper;
	private RoutePointService mRoutePointService;
	private CustomerService mCustomerService;
	private ShippingAddressService mShippingAddressService;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_route_point_edit);

		long id = getIntent().getLongExtra(getString(R.string.key_id), 0);

		if (id != 0) {
			Bundle args = new Bundle();
			args.putLong(KEY_ORDER_ID, id);
			getSupportLoaderManager().initLoader(LOADER_ID_ORDER, args, this);
		}
		
		Long routePointId = getIntent().getLongExtra(KEY_ROUTE_POINT, 0);				
		mHelper = OpenHelperManager.getHelper(this, DatabaseHelper.class);
		try {
			mRoutePointService = new RoutePointService(mHelper);
			mCustomerService = new CustomerService(mHelper);
			mShippingAddressService = new ShippingAddressService(mHelper);
		} catch (Throwable e) {
			Log.e(TAG, e.getMessage());
		}
		
		mCustomer = (EditText) findViewById(R.id.customer_edit_text);
		mShippinAddress = (EditText) findViewById(R.id.shipping_address_edit_text);
		mCustomer.setOnClickListener(new TextView.OnClickListener() {
			@Override
			public void onClick(View view) {
				Intent customersActivity = new Intent(getApplicationContext(), CustomersActivity.class);
		    	startActivityForResult(customersActivity, PICK_PRICE_LIST_REQUEST);
			}
        });
		
		mShippinAddress.setOnClickListener(new TextView.OnClickListener() {
			@Override
			public void onClick(View view) {
				Intent shippingAddressesActivity = new Intent(getApplicationContext(), ShippingAddressesActivity.class);
				if (mCustomer.getTag() != null) {
					shippingAddressesActivity.putExtra("customer_id", (Long)mCustomer.getTag());
				}
				startActivityForResult(shippingAddressesActivity, PICK_WAREHOUSE_REQUEST);
			}
        });

		// Let's show the application icon as the Up button
		if (getSupportActionBar() != null)
			getSupportActionBar().setDisplayHomeAsUpEnabled(true);
	}

	@Override
	public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
		getSupportMenuInflater().inflate(R.menu.menu_route_point_edit, menu);
		return true;
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
	    // Check which request we're responding to
	    if (requestCode == PICK_PRICE_LIST_REQUEST) {
	        // Make sure the request was successful
	        if (resultCode == RESULT_OK) {
	        	long customerId = data.getLongExtra("customer_id", 0l);
	        	mCustomer.setTag(customerId);
	        	
	        	try {
	        		Customer customer = mCustomerService.getById(customerId);
	        		mCustomer.setText(customer.getName());
	        		Iterable<ShippingAddress> shippingAddresses = mShippingAddressService.findByCustomer(customer);
					if (IterableHelpers.size(ShippingAddress.class, shippingAddresses) == 1) {
						ShippingAddress shippingAddress = shippingAddresses.iterator().next();
						mShippinAddress.setTag(shippingAddress.getId());
			        	mShippinAddress.setText(shippingAddress.getName());
					} else {	        		
						mShippinAddress.setTag(0);
			        	mShippinAddress.setText("");
					}
				} catch (Throwable e) {
					Log.e(TAG, e.getMessage());
				}	        	
	        }
	    } else if (requestCode == PICK_WAREHOUSE_REQUEST) {
	        // Make sure the request was successful
	        if (resultCode == RESULT_OK) {
	        	long shippingAddressId = data.getLongExtra("shipping_address_id", 0l);
	        		        	
	        	mShippinAddress.setTag(shippingAddressId);	        		        	
	        	try {
	        		ShippingAddress shippingAddress = mShippingAddressService.getById(shippingAddressId);
	        		mShippinAddress.setText(shippingAddress.getName());
					Customer customer = mCustomerService.getById(shippingAddress.getCustomerId());
					mCustomer.setTag(customer.getId());
		        	mCustomer.setText(customer.getName());
				} catch (Throwable e) {
					Log.e(TAG, e.getMessage());
				}
	        }
	    }
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			Intent upIntent = new Intent(this, RouteActivity.class);
			if (NavUtils.shouldUpRecreateTask(this, upIntent)) {
				TaskStackBuilder.from(this).addNextIntent(upIntent).startActivities();
				finish();
			} else {
				NavUtils.navigateUpTo(this, upIntent);
			}
			return true;
		case R.id.menu_item_save:
			//if (mOrder == null && mRoutePoint != null) {
			//	ShippingAddress shippingAddress;
			//	try {
			//		shippingAddress = mShippingAddressService.getById((Long)mShippinAddress.getTag());
			//		mRoutePointService.cratePoint(mRouteDate, shippingAddress);
			//	} catch (Throwable e) {
			//		Log.e(TAG, e.getMessage());
			//	}			
				
				//mRoutePoint = new RoutePoint(  mTitle.getText().toString(), mText.getText().toString());
			//} else {
				//mRoutePoint.setTitle(mTitle.getText().toString());
				//mRoutePoint.setText(mText.getText().toString());
			//}

			//onRoutePointSaved(mRoutePoint);

			return true;
		default:
			return false;
		}
	}

	public void onRoutePointSaved(RoutePoint routePoint) {
		try {
			mRoutePointService.savePoint(routePoint);
		} catch (Throwable e) {
			Log.e(TAG, "Unable to create or update route point: " + routePoint);
		}
		finish();
	}

	@Override
	public Loader<Order> onCreateLoader(int id, Bundle args) {
		switch (id) {
		case LOADER_ID_ORDER:
			long routePointId = args.getLong(KEY_ORDER_ID);

			try {
				return new OrdersLoader(this, orderId);
			} catch (Throwable e) {
				Log.e(TAG, e.getMessage());
			}
		default:
			return null;
		}
	}

	@Override
	public void onLoadFinished(Loader<Order> loader, Order data) {
		mOrder = data;
				
		if (mOrder != null) {
			try {
				ShippingAddress shippingAddress = mShippingAddressService.getById(mOrder.getShippingAddressId());
				Customer customer = mCustomerService.getById(shippingAddress.getCustomerId());
				mCustomer.setTag(customer.getId());
				mCustomer.setText(customer.getName());
				mShippinAddress.setTag(shippingAddress.getAddress());
				mShippinAddress.setText(shippingAddress.getAddress());
			} catch (Throwable e) {
				e.printStackTrace();
			}		
		}
	}

	@Override
	public void onLoaderReset(Loader<Order> loader) {
		mOrder = null;
	}
}