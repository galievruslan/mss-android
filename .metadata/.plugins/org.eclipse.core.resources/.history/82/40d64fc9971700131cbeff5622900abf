package com.mss.application;

import java.util.Calendar;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.view.MenuItem;
import com.j256.ormlite.android.apptools.OpenHelperManager;
import com.mss.application.fragments.DatePickerFragment;
import com.mss.application.fragments.OrderPickupItemsFragment;
import com.mss.application.fragments.TimePickerFragment;
import com.mss.application.fragments.OrderPickupItemsFragment.OnOrderPickupItemSelectedListener;
import com.mss.domain.models.Customer;
import com.mss.domain.models.Order;
import com.mss.domain.models.OrderPickedUpItem;
import com.mss.domain.models.OrderPickupItem;
import com.mss.domain.models.PriceList;
import com.mss.domain.models.ProductUnitOfMeasure;
import com.mss.domain.models.Route;
import com.mss.domain.models.RoutePoint;
import com.mss.domain.models.ShippingAddress;
import com.mss.domain.models.Warehouse;
import com.mss.domain.services.CustomerService;
import com.mss.domain.services.OrderService;
import com.mss.domain.services.PriceListService;
import com.mss.domain.services.ProductService;
import com.mss.domain.services.RoutePointService;
import com.mss.domain.services.RouteService;
import com.mss.domain.services.ShippingAddressService;
import com.mss.domain.services.WarehouseService;
import com.mss.infrastructure.ormlite.DatabaseHelper;

import android.os.Bundle;
import android.app.Activity;
import android.app.DatePickerDialog.OnDateSetListener;
import android.app.TimePickerDialog.OnTimeSetListener;
import android.content.Intent;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.Loader;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.TabHost;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.TabHost.OnTabChangeListener;
import android.widget.TabHost.TabSpec;

public class OrderActivity extends SherlockFragmentActivity implements OnTabChangeListener, LoaderCallbacks<Order>{

	private static final String TAG = OrderEditActivity.class.getSimpleName();
    
	public static final String TAB_GENERAL = "General";
    public static final String TAB_DETAILS = "Details";
    public static final String TAB_NOTES = "Notes";
    private TabHost mTabHost;
    private int mCurrentTab;

    public static final int LOADER_ID_ORDER = 0;
	
	public static final String KEY_ORDER_ID = "id";
	
	private Long mOrderId;
	private Order mOrder;
		
	private TextView mOrderDate;
	private TextView mOrderShippingDate;
	private TextView mOrderShippingTime;
	private TextView mOrderCustomer;
	private TextView mOrderShippingAddress;
	private TextView mOrderPriceList;
	private TextView mOrderWarehouse;
	private TextView mOrderNotes;
		
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_order);
						
		mOrderDate = (TextView)findViewById(R.id.order_date_edit_text);
		mOrderShippingDate = (TextView)findViewById(R.id.order_shipping_date_edit_text);
		mOrderShippingTime = (TextView)findViewById(R.id.order_shipping_time_edit_text);
		mOrderCustomer = (TextView)findViewById(R.id.order_customer_edit_text);
		mOrderShippingAddress = (TextView)findViewById(R.id.order_shipping_address_edit_text);
		mOrderPriceList = (TextView)findViewById(R.id.order_price_list_edit_text);
		mOrderWarehouse = (TextView)findViewById(R.id.order_warehouse_edit_text);
		mOrderNotes = (TextView)findViewById(R.id.order_notes_edit_text);
		
		mTabHost = (TabHost) findViewById(android.R.id.tabhost);
        setupTabs();
        
        mTabHost.setOnTabChangedListener(this);
        mTabHost.setCurrentTab(mCurrentTab);        
        
		mOrderId = getIntent().getLongExtra(getString(R.string.key_id), 0);
		getSupportLoaderManager().initLoader(LOADER_ID_ORDER, null, this);
		
		if (getSupportActionBar() != null)
			getSupportActionBar().setDisplayHomeAsUpEnabled(true);
	}	
	
	protected OrderPickupItemsFragment getOrderPickupItemsFragment() {
		return (OrderPickupItemsFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_order_pickup_item_list);
	}
	
	@Override
	public void onSaveInstanceState(Bundle savedInstanceState) {
		super.onSaveInstanceState(savedInstanceState);
		  // Save UI state changes to the savedInstanceState.
		  // This bundle will be passed to onCreate if the process is
		  // killed and restarted.
		  savedInstanceState.putBoolean("restart", true);
	}
	
	private void setupTabs() {
        mTabHost.setup();
        mTabHost.addTab(newTab(TAB_GENERAL, R.string.label_tab_general, R.id.tab_general));
        mTabHost.addTab(newTab(TAB_DETAILS, R.string.label_tab_details, R.id.tab_details));
        mTabHost.addTab(newTab(TAB_NOTES, R.string.label_tab_notes, R.id.tab_notes));
    }
    
    private TabSpec newTab(String tag, int labelId, int tabContentId) {
        Log.d(TAG, "buildTab(): tag=" + tag);
 
        TabSpec tabSpec = mTabHost.newTabSpec(tag);
        tabSpec.setIndicator(getString(labelId));
        tabSpec.setContent(tabContentId);
        return tabSpec;
    }
     
    @Override
    public void onTabChanged(String tabId) {
        if (TAB_GENERAL.equals(tabId)) {
            mCurrentTab = 0;
            return;
        }
        if (TAB_DETAILS.equals(tabId)) {
            mCurrentTab = 1;
            return;
        }
        if (TAB_NOTES.equals(tabId)) {
            mCurrentTab = 2;
            return;
        }
    }

	@Override
	public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
		getSupportMenuInflater().inflate(R.menu.menu_route_point_edit, menu);
		return true;
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
	    // Check which request we're responding to
	    if (requestCode == OrderEditActivity.REQUEST_EDIT_ORDER) {
	        // Make sure the request was successful
	        if (resultCode == RESULT_OK) {	        		        	
	        	getSupportLoaderManager().restartLoader(LOADER_ID_ORDER, null, this);
	        }
	    }
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			finish();
			return true;
		case R.id.menu_item_edit:
			if (mOrder != null)
				try {
					Intent intent = new Intent(this, OrderEditActivity.class);
					intent.putExtra(OrderEditActivity.KEY_ORDER_ID, mOrderId);
					startActivityForResult(intent, OrderEditActivity.REQUEST_EDIT_ORDER);
				} catch (Throwable e) {
					Log.e(TAG, e.getMessage());
				}
				finish();

			return true;
		default:
			return false;
		}
	}

	@Override
	public Loader<Order> onCreateLoader(int id, Bundle bundle) {
		switch (id) {
		case LOADER_ID_ORDER:
			try {
				return new OrderLoader(this, mOrderId);
			} catch (Throwable e) {
				Log.e(TAG, e.getMessage());
			}
		default:
			return null;
		}
	}

	@Override
	public void onLoadFinished(Loader<Order> orders, Order order) {
		if (order != null)
			mOrder = order;
		
		java.text.DateFormat dateFormat = DateFormat.getDateFormat(getApplicationContext());
		java.text.DateFormat timeFormat = DateFormat.getTimeFormat(getApplicationContext());
		if (mOrder == null) {
			mOrderDate.setText(dateFormat.format(mOrder.getOrderDate()));
			mOrderShippingDate.setText(dateFormat.format(mOrder.getShippingDate()));
			mOrderShippingTime.setText(timeFormat.format(mOrder.getShippingDate()));
			mOrderCustomer.setText(mOrder.getCustomerName());
			mOrderShippingAddress.setText(mOrder.getShippingAddressName());
			mOrderPriceList.setText(mOrder.getPriceListName());
			mOrderWarehouse.setText(mOrder.getWarehouseName());	
			mOrderNotes.setText(mOrder.getNote());
			getOrderPickupItemsFragment().refresh(mOrder.getId());
		}
	}

	@Override
	public void onLoaderReset(Loader<Order> orders) {
		mOrder = null;
	}	
}