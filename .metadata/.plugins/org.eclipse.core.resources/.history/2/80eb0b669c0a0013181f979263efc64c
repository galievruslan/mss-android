package com.mss.application;

import java.util.List;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.view.ActionMode;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.view.ActionMode.Callback;
import com.j256.ormlite.android.apptools.OpenHelperManager;
import com.mss.application.fragments.OrderListFragment;
import com.mss.application.fragments.OrderPickupItemsFragment;
import com.mss.application.fragments.RoutePointFragment;
import com.mss.application.fragments.OrderListFragment.OnOrderSelectedListener;
import com.mss.application.fragments.OrderPickupItemsFragment.OnOrderPickupItemSelectedListener;
import com.mss.application.fragments.RoutePointsOrdersFragment;
import com.mss.domain.models.Order;
import com.mss.domain.models.Route;
import com.mss.domain.models.RoutePoint;
import com.mss.domain.services.RoutePointService;
import com.mss.domain.services.RouteService;
import com.mss.infrastructure.ormlite.DatabaseHelper;

import android.os.Bundle;
import android.content.Intent;
import android.support.v4.app.NavUtils;
import android.support.v4.app.TaskStackBuilder;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.Loader;
import android.util.Log;
import android.widget.EditText;

public class RoutePointActivity extends SherlockFragmentActivity implements OnOrderSelectedListener, LoaderCallbacks<RoutePoint> {

	private static final String TAG = RoutePointActivity.class.getSimpleName();
	
	public static final int REQUEST_SHOW_ROUTE_POINT = 1;
	public static final long ROUTE_POINT_ID_NEW = 0;
	public static final String EXTRA_ROUTE_POINT_ID = "route_point_id";

	public static final int LOADER_ID_ROUTE_POINT = 0;
	
	private DatabaseHelper mHelper;
	private RouteService mRouteService;	
	private RoutePointService mRoutePointService;
	private RoutePointFragment mRoutePointFragment;
	
	private Long mRoutePointId;
	private RoutePoint mRoutePoint;
	
	private EditText mName;
	private EditText mAddress;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mName = (EditText)findViewById(R.id.label_name);
		mAddress = (EditText)findViewById(R.id.label_address);
		mRoutePointId = getIntent().getLongExtra(getString(R.string.key_id), ROUTE_POINT_ID_NEW);
		
		getSupportLoaderManager().initLoader(LOADER_ID_ROUTE_POINT, null, this);
		
		RoutePointsOrdersFragment fragment = getOrderListFragment();		
		fragment.addOnOrderSelectedListener(this);
		
		// Let's show the application icon as the Up button		
		if (getSupportActionBar() != null) {
			getSupportActionBar().setDisplayHomeAsUpEnabled(true);;
			getSupportActionBar().setDisplayShowTitleEnabled(false);
		}
	}
	
	protected RoutePointsOrdersFragment getOrderListFragment() {
		return (RoutePointsOrdersFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_order_list);
	}
	
	public long getRoutePointId(){
		return mRoutePoint.getId();
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);

		switch (requestCode) {
		case RoutePointEditActivity.REQUEST_EDIT_ROUTE_POINT:
			// We are coming back from the NoteEditActivity
			RoutePoint routePoint = null;
			try {
				routePoint = mRoutePointService.getById(mRoutePointFragment.getRoutePointId());
			} catch (Throwable e) {
				e.printStackTrace();
			}

			mRoutePointFragment.updateContent(routePoint);

			break;
		default:
			break;
		}
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			// ActionBar's Home button clicked

			Intent upIntent = new Intent(this, RouteActivity.class);
			if (NavUtils.shouldUpRecreateTask(this, upIntent)) {
				TaskStackBuilder.create(this).addNextIntent(upIntent).startActivities();
				finish();
			} else {
				NavUtils.navigateUpTo(this, upIntent);
			}
			return true;
		case R.id.menu_item_edit:
			if (mRoutePointFragment != null) {
				Route route = null;
				RoutePoint routePoint = null;
				
				routePoint = mRoutePointService.getById(mRoutePointFragment.getRoutePointId());
				route = mRouteService.getById(routePoint.getRouteId());
				
				Intent i = new Intent(this, RoutePointEditActivity.class);
				i.putExtra(getString(R.string.key_id), routePoint.getId());
				i.putExtra(RoutePointEditActivity.KEY_ROUTE_DATE, route.getDate().toString());
				startActivityForResult(i, RoutePointEditActivity.REQUEST_EDIT_ROUTE_POINT);
			}
			return true;
		case R.id.menu_item_delete:
			try {
				mRoutePointService.deletePoint(mRoutePointFragment.getRoutePoint());
			} catch (Throwable e) {
				e.printStackTrace();
			}
			finish();
		case R.id.menu_item_add:
			if (mRoutePointFragment != null) {
				RoutePoint routePoint = null;		
				routePoint = mRoutePointService.getById(mRoutePointFragment.getRoutePointId());
				
				Intent intent = new Intent(this, OrderEditActivity.class);
				intent.putExtra(OrderEditActivity.KEY_ROUTE_POINT_ID, routePoint.getId());
				startActivityForResult(intent, 0);
			}
			return true;
		default:
			return false;
		}
	}

	@Override
	public void onOrderSelected(Order order, int position, long id) {
		Intent intent = new Intent(getApplicationContext(), OrderEditActivity.class);
		intent.putExtra(OrderEditActivity.KEY_ORDER_ID, id);
		startActivity(intent);
	}

	@Override
	public Loader<RoutePoint> onCreateLoader(int id, Bundle bundle) {
		switch (id) {
		case LOADER_ID_ROUTE_POINT:
			try {
				return new RoutePointLoader(this, mRoutePointId);
			} catch (Throwable e) {
				Log.e(TAG, e.getMessage());
			}
		default:
			return null;
		}
	}

	@Override
	public void onLoadFinished(Loader<RoutePoint> loader, RoutePoint data) {
		mRoutePoint = data;
		mName.setText(mRoutePoint.getShippingAddressName());
		mAddress.setText(mRoutePoint.getShippingAddressValue());
		
		if (mRoutePoint.getId() != 0) {
			getOrderListFragment().refresh(mRoutePoint.getId());
		}
	}

	@Override
	public void onLoaderReset(Loader<RoutePoint> arg0) {
		// TODO Auto-generated method stub
		
	}
}
