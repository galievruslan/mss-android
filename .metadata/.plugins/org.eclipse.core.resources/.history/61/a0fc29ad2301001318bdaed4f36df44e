package com.mss.application;

import java.lang.ref.WeakReference;
import java.util.Date;
import java.util.List;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.view.ActionMode;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.ActionMode.Callback;
import com.mss.application.fragments.OrderFragment;
import com.mss.application.fragments.OrderListFragment;
import com.mss.application.fragments.OrderListFragment.OnOrderSelectedListener;
import com.mss.application.fragments.RouteFragment;
import com.mss.application.fragments.RoutePointFragment;
import com.mss.application.fragments.RouteFragment.OnRouteDateChangedListener;
import com.mss.application.fragments.RouteFragment.OnRoutePointSelectedListener;
import com.mss.domain.models.Order;
import com.mss.domain.models.RoutePoint;

import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.NavUtils;
import android.support.v4.app.TaskStackBuilder;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.Loader;
import android.util.Log;
import android.view.Menu;

public class OrdersActivity extends SherlockFragmentActivity implements OnOrderSelectedListener, Callback, LoaderCallbacks<List<Order>> {

	private static final String TAG = OrdersActivity.class.getSimpleName();
	private static final boolean DEBUG = BuildConfig.DEBUG && false;

	/// RoutePoints-specific Loader id
	private static final int LOADER_ID_ORDERS = 0;

	private PaneMode mPaneMode;
	private ActionMode mActionMode;
	private OrderAdapter mOrderAdapter;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_route);

		try {
			mOrderAdapter = new OrderAdapter(this);
		} catch (Throwable e) {
			Log.e(TAG, e.getMessage());
		}
		getSupportLoaderManager().initLoader(LOADER_ID_ORDERS, null, this);

		// Instantiate the proper PaneMode logic helper

		if (getResources().getBoolean(R.bool.dual_pane))
			mPaneMode = new DualPaneMode(this);
		else
			mPaneMode = new OnePaneMode(this);

		OrderListFragment fragmentRoute = getOrderListFragment();
		fragmentRoute.addOnOrderSelectedListener(this);

		mPaneMode.onCreate(savedInstanceState);
		
		if (getSupportActionBar() != null)
			getSupportActionBar().setDisplayHomeAsUpEnabled(true);
	}

	protected OrderListFragment getOrderListFragment() {
		return (OrderListFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_order_list);
	}

	protected OrderFragment getOrderFragment() {
		return (OrderFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_order);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);

		getSupportLoaderManager().restartLoader(LOADER_ID_ORDERS, null, this);
		
		switch (requestCode) {
			case RoutePointActivity.REQUEST_SHOW_ORDER:
				if (data != null) {
					long routePointId = data.getLongExtra(RoutePointActivity.EXTRA_ROUTE_POINT_ID, 0l);
					if (routePointId != 0l) {
						showOrderById(routePointId);
					}
				}
				break;
			case RoutePointEditActivity.REQUEST_EDIT_ORDER:
				if (resultCode == RESULT_OK) {
					
					OrderFragment f = getOrderFragment();
					if (f != null) {
						try {
							f.updateContent(mOrderAdapter.getItemById(f.getOrderId()));
						} catch (Throwable e) {
							Log.e(TAG, e.toString());
						}
					}
				}

				break;
			default:
				break;
		}
	}

	@Override
	public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
		MenuInflater inflater = getSupportMenuInflater();
		inflater.inflate(R.menu.menu_list, menu);

		return true;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item) {
		// Note that we handle Edit and Delete items here, even if they were
		// added by the NoteFragment.

		switch (item.getItemId()) {
			case android.R.id.home:
				Intent upIntent = new Intent(this, MainActivity.class);
				if (NavUtils.shouldUpRecreateTask(this, upIntent)) {
					TaskStackBuilder.from(this).addNextIntent(upIntent).startActivities();
					finish();
				} else {
					NavUtils.navigateUpTo(this, upIntent);
				}
				return true;
			case R.id.menu_item_add:
				mPaneMode.onAddOrder();
				return true;
			case R.id.menu_item_delete:
				OrderFragment frag = getOrderFragment();
				if (frag != null) {
					try {
						mOrderAdapter.delete(getOrderFragment().getOrder());
					} catch (Throwable e) {						
						
					}
					getSupportLoaderManager().restartLoader(LOADER_ID_ORDERS, null, this);
				}

				return true;
			default:
				return false;
		}
	}

	@Override
	public void onOrderSelected(Order order, int position, long id) {
		if (DEBUG)
			Log.d(TAG, "onOrderSelected: " + position);

			if (mActionMode != null)
				mActionMode.finish();

			mPaneMode.onOrderSelected(order, position, id);
	}
	
	@Override
	public boolean onCreateActionMode(ActionMode mode,
		com.actionbarsherlock.view.Menu menu) {
		MenuInflater inflater = getSupportMenuInflater();
		inflater.inflate(R.menu.action_mode_list, menu);

		mActionMode = mode;

		return true;
	}

	@Override
	public boolean onPrepareActionMode(ActionMode mode,
		com.actionbarsherlock.view.Menu menu) {
		return false;
	}

	@Override
	public boolean onActionItemClicked(ActionMode mode, com.actionbarsherlock.view.MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_item_delete:
			FragmentManager manager = getSupportFragmentManager();
			OrderListFragment frag = (OrderListFragment) manager.findFragmentById(R.id.fragment_order_list);
			OrderAdapter adapter = (OrderAdapter) frag.getListAdapter();
			try {
				adapter.delete(getOrderFragment().getOrder());
			} catch (Throwable e) {
				Log.e(TAG, e.toString());
			}

			getSupportLoaderManager().restartLoader(LOADER_ID_ORDERS, null, this);

			mode.finish();
			return true;
		default:
			return false;
		}
	}

	@Override
	public void onDestroyActionMode(ActionMode mode) {
		mActionMode = null;

		FragmentManager manager = getSupportFragmentManager();
		OrderListFragment frag = (OrderListFragment) manager.findFragmentById(R.id.fragment_order_list);
		OrderAdapter adapter = (OrderAdapter) frag.getListAdapter();
	}

	@Override
	public Loader<List<Order>> onCreateLoader(int id, Bundle args) {
		switch (id) {
		case LOADER_ID_ORDERS:
			try {
				return new OrderLoader(this, getOrderListFragment().);
			} catch (Throwable e) {
				Log.e(TAG, e.getMessage());
			}
		default:
			return null;
		}
	}

	@Override
	public void onLoadFinished(Loader<List<Order>> loader, List<Order> data) {
		switch (loader.getId()) {
		case LOADER_ID_ORDERS:
			mPaneMode.onLoadFinished(loader, data);
			break;
		default:
			break;
		}
	}

	@Override
	public void onLoaderReset(Loader<List<Order>> loader) {
		mOrderAdapter.swapData(null);
	}
	
	public void showOrderById(long id) {
		Order n;
		try {
			n = mOrderAdapter.getItemById(id);
			mPaneMode.onOrderSelected(n, -1, id);
		} catch (Throwable e) {
			Log.e(TAG, e.toString());
		}
	}

	public void showOrderByPosition(int position) {
		if (mOrderAdapter.getCount() > 0) {
			int nextPosition = position;
			if (nextPosition >= mOrderAdapter.getCount()) {
				// Decrease the position since we don't have enough route points in the list

				nextPosition = mOrderAdapter.getCount() - 1;
			}
			OrderFragment f = OrderFragment.newInstance((Order) mOrderAdapter.getItem(nextPosition));

			getSupportFragmentManager().beginTransaction().replace(R.id.fragment_route_point, f).commitAllowingStateLoss();
		} else {
			// There are no route points, remove the side fragment

			OrderFragment f = getOrderFragment();
			if (f != null) {
				getSupportFragmentManager().beginTransaction().remove(f).commitAllowingStateLoss();
			}
		}
	}
    
	/**
	 * Hides the logic that depends on the pane mode
	 */
	private static abstract class PaneMode {

		protected final WeakReference<OrdersActivity> mWeakActivity;

		public PaneMode(OrdersActivity activity) {
			mWeakActivity = new WeakReference<OrdersActivity>(activity);
		}

		/**
		 * Called by the {@link AbsNoteActivity#onCreate(Bundle)} method
		 */
		public abstract void onCreate(Bundle savedInstanceState);

		/**
		 * Called by the {@link AbsNoteActivity#onNoteSelected(Note, int, long)} method
		 * 
		 * @param n
		 *            the {@link Note} instance that was selected
		 * @param position
		 *            the position on the list
		 * @param id
		 *            {@link Note} id
		 */
		public abstract void onOrderSelected(Order n, int position, long id);

		/**
		 * Called when a {@link Note} was added.
		 */
		public abstract void onAddOrder();

		/**
		 * Called when the {@link Loader} finishes its work
		 * 
		 * @param loader the {@link Loader} object
		 * @param data returned list of {@link Note Notes}
		 */
		public void onLoadFinished(Loader<List<Order>> loader, List<Order> data) {
			OrderAdapter orderAdapter = mWeakActivity.get().mOrderAdapter;
			orderAdapter.swapData(data);
			mWeakActivity.get().getOrderListFragment().setListAdapter(orderAdapter);
		}
	}

	/**
	 * One-pane mode specific logic
	 */
	private static class OnePaneMode extends PaneMode {

		public OnePaneMode(OrdersActivity activity) {
			super(activity);
		}

		@Override
		public void onCreate(Bundle savedInstanceState) {
			OrdersActivity activity = mWeakActivity.get();

			if (savedInstanceState == null) {
				// Activity is being recreated
			}

			OrderFragment f = (OrderFragment) activity.getSupportFragmentManager().findFragmentById(R.id.fragment_order);
			if (f != null) {
				// We don't need the RoutePointFragment in OnePaneMode so we get rid of it

				activity.getSupportFragmentManager().beginTransaction().remove(f).commit();
			}
		}

		@Override
		public void onOrderSelected(Order n, int position, long id) {
			OrdersActivity activity = mWeakActivity.get();

			Intent intent = new Intent(activity, OrderActivity.class);
			intent.putExtra(activity.getString(R.string.key_id), id);
			activity.startActivityForResult(intent, OrderActivity.REQUEST_SHOW_ORDER);
		}

		@Override
		public void onAddOrder() {
			OrdersActivity activity = mWeakActivity.get();

			Intent intent = new Intent(activity, OrderEditActivity.class);
			intent.putExtra(OrderEditActivity.KEY_ORDER_ID, activity.getOrderFragment().getOrderId());
			activity.startActivityForResult(intent, 0);
		}
	}

	/**
	 * Dual-pane mode specific logic
	 */
	private static class DualPaneMode extends PaneMode {

		public DualPaneMode(OrdersActivity activity) {
			super(activity);
		}

		/**
		 * In dual pane mode we want to show a NoteFragment if there's one in the database
		 */
		@Override
		public void onCreate(Bundle savedInstanceState) {
			if (savedInstanceState == null) {
				// Activity is being recreated
			}
		}

		@Override
		public void onOrderSelected(Order n, int position, long id) {
			OrdersActivity activity = mWeakActivity.get();

			OrderFragment currentFragment = activity.getOrderFragment();

			if (currentFragment == null || currentFragment.getOrderId() != id) {
				// Let's swap the NoteFragment with the selected one

				activity.getSupportFragmentManager().beginTransaction()
					.replace(R.id.fragment_order, OrderFragment.newInstance(n)).commit();
			}
		}

		@Override
		public void onAddOrder() {
			OrdersActivity activity = mWeakActivity.get();

			Intent intent = new Intent(activity, OrderEditActivity.class);
			intent.putExtra(OrderEditActivity.KEY_ORDER_ID, activity.getOrderFragment().getOrderId());
			activity.startActivityForResult(intent, 0);
		}

		@Override
		public void onLoadFinished(Loader<List<Order>> loader, List<Order> data) {
			super.onLoadFinished(loader, data);

			OrdersActivity activity = mWeakActivity.get();

			// In DualPaneMode we want to show a side NoteFragment
			// Remember that we can not do FragmentTransactions in onLoadFinished

			activity.showOrderByPosition(activity.getOrderListFragment().getLastClickedPosition());
		}
	}
}
