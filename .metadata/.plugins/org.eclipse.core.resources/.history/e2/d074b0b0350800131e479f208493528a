package com.mss.infrastructure.ormlite;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;

import com.j256.ormlite.dao.GenericRawResults;
import com.j256.ormlite.dao.RawRowMapper;
import com.mss.domain.models.Constants;
import com.mss.domain.models.OrderPickupItem;
import com.mss.domain.models.ProductUnitOfMeasure;

public class OrmliteProductUnitOfMeasureRepository extends OrmliteGenericRepository<ProductUnitOfMeasure> {

	private String rawQuery;
	public OrmliteProductUnitOfMeasureRepository(DatabaseHelper databaseHelper) throws Throwable{
		super(databaseHelper.getProductUnitOfMeasureDao());
		
		rawQuery = "select " + 
				Constants.Tables.ProductUnitOfMeasure.TABLE_NAME + "." + Constants.Tables.Entity.ID_FIELD  + " as [id], " +
				Constants.Tables.ProductUnitOfMeasure.TABLE_NAME + "." + Constants.Tables.ProductUnitOfMeasure.PRODUCT_FIELD + " as [product_id], " +
				Constants.Tables.ProductUnitOfMeasure.TABLE_NAME + "." + Constants.Tables.ProductUnitOfMeasure.UNIT_OF_MEASURE_FIELD + " as [uom_id], " +
				Constants.Tables.UnitOfMeasure.TABLE_NAME + "." + Constants.Tables.UnitOfMeasure.NAME_FIELD + " as [uom_name], " +
				Constants.Tables.ProductUnitOfMeasure.TABLE_NAME + "." + Constants.Tables.ProductUnitOfMeasure.COUNT_IN_BASE_FIELD + " as [count_in_base] " +
				Constants.Tables.ProductUnitOfMeasure.TABLE_NAME + "." + Constants.Tables.ProductUnitOfMeasure.BASE_FIELD + " as [base] " +
				"from " + Constants.Tables.ProductUnitOfMeasure.TABLE_NAME + " as " + Constants.Tables.ProductUnitOfMeasure.TABLE_NAME + " " +
				"left join " + Constants.Tables.UnitOfMeasure.TABLE_NAME + " as " + Constants.Tables.UnitOfMeasure.TABLE_NAME + " on " +
				Constants.Tables.ProductUnitOfMeasure.TABLE_NAME + "." + Constants.Tables.ProductUnitOfMeasure.UNIT_OF_MEASURE_FIELD + " = " +
				Constants.Tables.UnitOfMeasure.TABLE_NAME + "." + Constants.Tables.Entity.ID_FIELD;
	}
	
	@Override
	public ProductUnitOfMeasure getById(long id) throws Throwable {
		GenericRawResults<OrderPickupItem> rawResults =
				dao.queryRaw(rawQuery + " where " + Constants.Tables.PriceListLine.TABLE_NAME + "." + Constants.Tables.Entity.ID_FIELD + " = " + Long.toString(id) ,
				    new RawRowMapper<OrderPickupItem>() {
				            public OrderPickupItem mapRow(String[] columnNames,
				              String[] resultColumns) {
				            	DecimalFormat decimalFormat = (DecimalFormat) NumberFormat.getInstance();
				            	decimalFormat.setParseBigDecimal(true);
				            	BigDecimal price = null;
				            	try {
									price = (BigDecimal)decimalFormat.parse(resultColumns[3]);
								} catch (ParseException e) {
									price = new BigDecimal(0);
								}
				            	
				            	return new OrderPickupItem(Long.parseLong(resultColumns[0]),
				                		Long.parseLong(resultColumns[1]),
				                		resultColumns[2],
				                		price);
				        }
				    });
		
		OrderPickupItem orderPickupItem = rawResults.getFirstResult();
		rawResults.close();
		return orderPickupItem;
	}

	@Override
	public Iterable<ProductUnitOfMeasure> find() throws Throwable {
		GenericRawResults<OrderPickupItem> rawResults =
				dao.queryRaw(rawQuery,
				    new RawRowMapper<OrderPickupItem>() {
				            public OrderPickupItem mapRow(String[] columnNames,
				              String[] resultColumns) {
				            	DecimalFormat decimalFormat = (DecimalFormat) NumberFormat.getInstance();
				            	decimalFormat.setParseBigDecimal(true);
				            	BigDecimal price = null;
				            	try {
									price = (BigDecimal)decimalFormat.parse(resultColumns[3]);
								} catch (ParseException e) {
									price = new BigDecimal(0);
								}
				            	
				            	return new OrderPickupItem(Long.parseLong(resultColumns[0]),
				                		Long.parseLong(resultColumns[1]),
				                		resultColumns[2],
				                		price);
				        }
				    });
		
		Iterable<OrderPickupItem> orderPickupItems = rawResults.getResults();
		rawResults.close();
		return orderPickupItems;
	}
}
