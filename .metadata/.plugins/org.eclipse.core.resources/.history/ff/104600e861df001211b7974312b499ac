package com.mss.android.web.repositories;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.json.JSONException;
import org.json.JSONObject;

public class WebServer {
	
	String address;
	
	public WebServer(String address) {		
		this.address = address;
	}
	
	String login;
	String password;
	
	public WebConnection connect(String login, String password) throws WebConnectionException, AuthenticationFailedException{		
		this.login = login;
		this.password = password;
		
		webConnection = new WebConnection(this);			
		try {
			
			Get("/users/sign_in", new HashMap<String, String>());
			
			JSONObject jsonCredentials = new JSONObject();
			jsonCredentials.put("username", login);
			jsonCredentials.put("password", password);
			JSONObject jsonUser = new JSONObject();
			jsonUser.put("user", jsonCredentials);
			
			int status = Post("/users/sign_in", jsonUser);
			if (status != 302)
				throw new AuthenticationFailedException();
			
			return webConnection;
		} catch (JSONException e) { 
			e.printStackTrace(); 
		} catch (IOException e) { 
			e.printStackTrace(); 
		} catch (URISyntaxException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		throw new WebConnectionException();
	}
	
	public String Get(String url, Map<String, String> params) throws URISyntaxException, Exception {
		URIBuilder builder = new URIBuilder(address);
		builder.setPath(url);
		for (Map.Entry<String, String> entry : params.entrySet()) {
			builder.setParameter(entry.getKey(), entry.getValue());
		}
		URI uri = builder.build();
		
		System.out.print(uri);
		
		HttpParams getParams = new BasicHttpParams();
		getParams.setParameter("http.protocol.handle-redirects",false);
					
		HttpGet httpGet = new HttpGet(uri);
		httpGet.addHeader("User-Agent", "MSS.Android mobile client");
		httpGet.setParams(getParams);
		
		String cookie = getCurrentConnection().getCookie();
		if (cookie.length() > 0) {
			httpGet.setHeader("Cookie", cookie);	
		}	
		
		HttpResponse response = Dispatch(httpGet);
		String content = Parse(response);
		String csrfToken = extractCsrfToken(content);
		if (csrfToken != "")
			getCurrentConnection().setCsrf(csrfToken);
		
		httpGet.releaseConnection();		
		return content;
	}
	
	public int Post(String url, JSONObject data) throws JSONException, Exception {
		if (getCurrentConnection().getCsrf() != "")
			data.put("csrf-token", getCurrentConnection().getCsrf());
		
		StringEntity entity = new StringEntity(data.toString());
		entity.setContentType("application/json");
		
		HttpPost httpPost = new HttpPost(address + url);		
		httpPost.setEntity(entity);
		httpPost.addHeader("User-Agent", "MSS.Android mobile client");
		
		String cookie = webConnection.getCookie();
		if (cookie.length() > 0) {
			httpPost.setHeader("Cookie", cookie);	
		}	
		
		HttpResponse response = Dispatch(httpPost);
		String content = Parse(response);
		String csrfToken = extractCsrfToken(content);
		if (csrfToken != "")
			getCurrentConnection().setCsrf(csrfToken);
		
		httpPost.releaseConnection();		
		
		return response.getStatusLine().getStatusCode();
	}
	
	private HttpResponse Dispatch(HttpUriRequest request) throws IOException {
		HttpClient httpClient = new DefaultHttpClient();
		HttpResponse response = httpClient.execute(request);
		if (response.containsHeader("Cookie")) {
			webConnection.setCookie(response.getHeaders("Cookie")[0].getValue());
		}
		
		return response;
	}
	
	private String Parse(HttpResponse response) throws IllegalStateException, IOException {
		InputStream stream = response.getEntity().getContent();
		BufferedReader getOutputBuffer = new BufferedReader(new InputStreamReader((stream)));
		
		String line;
		StringBuffer output = new StringBuffer("");
		while ((line = getOutputBuffer.readLine()) != null) {
			output.append(line);
		}
			
		return output.toString();
	}
	
	private String extractCsrfToken(String html){
		String csrfToken = "";
		
		try {
			final Pattern pattern = Pattern.compile("<input name=\"authenticity_token\" type=\"hidden\" value=\"(.+?)\" />");
			final Matcher matcher = pattern.matcher(html);
			if (matcher.find() && matcher.groupCount() > 1)
				csrfToken = matcher.group(1);
		} catch (Exception e) {
			e.printStackTrace(); 
		}
		
		return csrfToken;
	}
	
	private WebConnection webConnection;
	public WebConnection getCurrentConnection(){
		return webConnection;
	}
}
