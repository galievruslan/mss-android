package com.mss.application.fragments;

import java.util.HashSet;
import java.util.Set;

import android.os.Bundle;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.GestureDetector;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;

import com.actionbarsherlock.app.SherlockFragment;
import com.actionbarsherlock.view.ActionMode;
import com.actionbarsherlock.view.ActionMode.Callback;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.mss.application.R;
import com.mss.application.RoutePointPhotoAdapter;
import com.mss.domain.models.RoutePoint;
import com.mss.domain.models.RoutePointPhoto;
import com.mss.domain.services.RoutePointService;
import com.mss.infrastructure.ormlite.DatabaseHelper;

public class RoutePointPhotosFragment extends SherlockFragment implements Callback {
	private static final String TAG = RoutePointPhotosFragment.class.getSimpleName();
		
	private final Set<OnRoutePointPhotoSelectedListener> mOnRoutePointPhotoSelectedListeners = 
			new HashSet<RoutePointPhotosFragment.OnRoutePointPhotoSelectedListener>(1);
	
	private int mLastPosition;
	
	private RoutePoint mRoutePoint;
	private RoutePointPhotoAdapter mRoutePointPhotoAdapter;
	private ViewPager mPager;

	private DatabaseHelper mDatabaseHelper;
	private RoutePointService mRoutePointService;
	
	public RoutePointPhotosFragment() {
	}

	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View v = inflater.inflate(R.layout.fragment_photos, container, false);
		mPager = (ViewPager)v.findViewById(R.id.pager);
		mPager.setOnTouchListener(new OnTouchListener() {
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				mPager.onTouchEvent(event);
		            return false;
			}
		});
		
		mDatabaseHelper = new DatabaseHelper(v.getContext());
		try {
			mRoutePointService = new RoutePointService(mDatabaseHelper);
		} catch (Throwable e) {
			Log.e(TAG, e.getMessage());
		}
		
	    return v;
	}
	
	public void refresh(long routePointId) {
		mRoutePoint = mRoutePointService.getById(routePointId);
		
		mRoutePointPhotoAdapter = new RoutePointPhotoAdapter(
				getView().getContext(),
				getFragmentManager(),
				mRoutePoint);
		
		mPager.setAdapter(mRoutePointPhotoAdapter);
	}

	public int getLastClickedPosition() {
		return mLastPosition;
	}

	public void addOnRoutePointPhotoSelectedListener(OnRoutePointPhotoSelectedListener listener) {
		mOnRoutePointPhotoSelectedListeners.add(listener);
	}

	public boolean removeOnRoutePointPhotoSelectedListener(OnRoutePointPhotoSelectedListener listener) {
		return mOnRoutePointPhotoSelectedListeners.remove(listener);
	}
	
	/**
	 * Implement this interface if you want to handle events when the user selects a note from the list
	 */
	public interface OnRoutePointPhotoSelectedListener {
		/**
		 * Called when the user selects a note entry on the list
		 * 
		 * @param n
		 *            {@link Note} instance
		 * @param position
		 *            its position on the list
		 * @param id
		 *            its id
		 */
		void onRoutePointPhotoSelected(RoutePointPhoto routePointPhoto, int position, long id);
	}

	@Override
	public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
		switch (item.getItemId()) {
		default:
			return false;
		}
	}

	@Override
	public boolean onCreateActionMode(ActionMode mode, Menu menu) {
		return false;
	}

	@Override
	public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
		return false;
	}

	@Override
	public void onDestroyActionMode(ActionMode mode) {
		mode = null;
		
	}
	
	class TapGestureListener extends GestureDetector.SimpleOnGestureListener{				
		@Override
		public boolean onSingleTapConfirmed(MotionEvent e) {
			// TODO Auto-generated method stub
			return super.onSingleTapConfirmed(e);
		}  
	}
}