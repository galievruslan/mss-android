package com.mss.application;

import com.mss.infrastructure.web.AuthenticationFailedException;
import com.mss.infrastructure.web.WebConnectionException;
import com.mss.infrastructure.web.WebServer;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;

public class SynchronizationActivity extends Activity {  

    /**
     * Keep track of the login task to ensure we can cancel it if requested.
     */
    private SynchronizationTask mSyncTask = null;

    // Values for email and password at the time of the login attempt.
    private boolean mFullSync;

    // UI references.
    private CheckBox mFullSyncView;
    private View mSyncFormView;
    private View mSyncStatusView;
    private TextView mSyncStatusMessageView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_synchronization);
        
        // Set up the login form.
        mFullSyncView = (CheckBox) findViewById(R.id.full_synchronization_checkbox);

        mSyncFormView = findViewById(R.id.sync_form);
        mSyncStatusView = findViewById(R.id.sync_status);
        mSyncStatusMessageView = (TextView) findViewById(R.id.sync_status_message);

        findViewById(R.id.synchronize_button).setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                attemptSync();
            }
        });
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        getMenuInflater().inflate(R.menu.activity_login, menu);
        return true;
    }

    /**
     * Attempts to sign in or register the account specified by the login form.
     * If there are form errors (invalid email, missing fields, etc.), the
     * errors are presented and no actual login attempt is made.
     */
    public void attemptSync() {
        if (mSyncTask != null) {
            return;
        }

        boolean cancel = false;
        View focusView = null;

        if (cancel) {
            // There was an error; don't attempt login and focus the first
            // form field with an error.
            focusView.requestFocus();
        } else {
            // Show a progress spinner, and kick off a background task to
            // perform the user login attempt.
        	mSyncStatusMessageView.setText(R.string.sync_progress_signing_in);
            showProgress(true);
            mSyncTask = new SynchronizationTask();
            mSyncTask.execute((Void) null);
        }
    }

    /**
     * Shows the progress UI and hides the login form.
     */
    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
    private void showProgress(final boolean show) {
        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
        // for very easy animations. If available, use these APIs to fade-in
        // the progress spinner.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);

            mLoginStatusView.setVisibility(View.VISIBLE);
            mLoginStatusView.animate()
                    .setDuration(shortAnimTime)
                    .alpha(show ? 1 : 0)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            mLoginStatusView.setVisibility(show ? View.VISIBLE : View.GONE);
                        }
                    });

            mLoginFormView.setVisibility(View.VISIBLE);
            mLoginFormView.animate()
                    .setDuration(shortAnimTime)
                    .alpha(show ? 0 : 1)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
                        }
                    });
        } else {
            // The ViewPropertyAnimator APIs are not available, so simply show
            // and hide the relevant UI components.
            mLoginStatusView.setVisibility(show ? View.VISIBLE : View.GONE);
            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }

    /**
     * Represents an asynchronous login/registration task used to authenticate
     * the user.
     */
    public class SynchronizationTask extends AsyncTask<Void, Void, Boolean> {
    	    	
    	public SynchronizationTask(String server, String login, String password) {
    		this.server = server;
    		this.login = login;
    		this.password = password;
    	}
    	
        @Override
        protected Boolean doInBackground(Void... params) {
        	WebServer webServer = new WebServer(server);

           	try {
				webServer.connect(login, password);
			} catch (WebConnectionException e) {
				e.printStackTrace();
				return false;
			} catch (AuthenticationFailedException e) {
				e.printStackTrace();
				return false;
			}

            return true;
        }

        @Override
        protected void onPostExecute(final Boolean success) {
            mAuthTask = null;
            showProgress(false);

            if (success) {
            	//Account account = new Account(login, "MSS_ACCOUNT");
            	//AccountManager accountManager = AccountManager.get(getApplicationContext());            	
            	//accountManager.addAccountExplicitly(account, password, null);
            	
            	Intent mainActivity = new Intent(getApplicationContext(), MainActivity.class);
            	startActivity(mainActivity);
            	
                finish();
            } else {
                mPasswordView.setError(getString(R.string.error_incorrect_password));
                mPasswordView.requestFocus();
            }
        }

        @Override
        protected void onCancelled() {
            mAuthTask = null;
            showProgress(false);
        }
    }
}
