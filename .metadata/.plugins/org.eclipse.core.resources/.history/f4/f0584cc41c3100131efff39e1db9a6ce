package com.mss.domain.services;

import java.util.ArrayList;
import java.util.Date;

import android.util.Log;

import com.mss.domain.models.Order;
import com.mss.domain.models.OrderItem;
import com.mss.domain.models.OrderPickedUpItem;
import com.mss.domain.models.OrderPickupItem;
import com.mss.domain.models.Preferences;
import com.mss.domain.models.PriceList;
import com.mss.domain.models.Route;
import com.mss.domain.models.RoutePoint;
import com.mss.domain.models.Status;
import com.mss.domain.models.Warehouse;
import com.mss.infrastructure.ormlite.DatabaseHelper;
import com.mss.infrastructure.ormlite.OrmliteOrderItemRepository;
import com.mss.infrastructure.ormlite.OrmliteOrderPickupItemRepository;
import com.mss.infrastructure.ormlite.OrmliteOrderRepository;
import com.mss.infrastructure.ormlite.OrmlitePreferencesRepository;
import com.mss.infrastructure.ormlite.OrmliteStatusRepository;
import com.mss.utils.IterableHelpers;
import com.mss.utils.MathHelpers;

public class PickupService {
	private static final String TAG = PickupService.class.getSimpleName();
	
	private DatabaseHelper databaseHelper;
	private OrmliteOrderRepository orderRepo;
	private OrmliteOrderItemRepository orderItemRepo;
	private OrmliteOrderPickupItemRepository orderPickUpItemRepo;
	private OrmlitePreferencesRepository preferencesRepo;
	private OrmliteStatusRepository statusRepo;
	
	public PickupService(DatabaseHelper databaseHelper, PriceList priceList, Warehouse warehouse) throws Throwable{
		this.databaseHelper = databaseHelper;
		orderRepo = new OrmliteOrderRepository(this.databaseHelper);
		orderItemRepo = new OrmliteOrderItemRepository(this.databaseHelper);
		orderPickUpItemRepo = new OrmliteOrderPickupItemRepository(this.databaseHelper, priceList.getId(), warehouse.getId());
		preferencesRepo = new OrmlitePreferencesRepository(this.databaseHelper);
		statusRepo = new OrmliteStatusRepository(this.databaseHelper);		
	}
	
	public OrderPickupItem getOrderPickupItemById(long id) {
		try {
			return orderPickUpItemRepo.getById(id);
		} catch (Throwable e) {
			Log.e(TAG, e.getMessage());
			return null;
		}
	}
	
	public Iterable<OrderPickupItem> getOrderPickupItems(long priceListId, Iterable<Long> categoryFilter) {
		try {
			return orderPickUpItemRepo.findByPriceListId(IterableHelpers.toArray(Long.class, categoryFilter));
		} catch (Throwable e) {
			Log.e(TAG, e.getMessage());
			return new ArrayList<OrderPickupItem>();
		}
	}
	
	public Iterable<OrderPickupItem> getOrderPickupItems(long priceListId, Iterable<Long> categoryFilter, String searchCriteria) {
		try {
			return orderPickUpItemRepo.findByPriceListId(IterableHelpers.toArray(Long.class, categoryFilter), searchCriteria);
		} catch (Throwable e) {
			Log.e(TAG, e.getMessage());
			return new ArrayList<OrderPickupItem>();
		}
	}
}
