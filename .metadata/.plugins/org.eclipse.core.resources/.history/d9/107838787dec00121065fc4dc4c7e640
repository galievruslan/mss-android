package com.mss.android.infrastructure.ormlite;

import android.content.Context;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.support.ConnectionSource;
import com.j256.ormlite.table.TableUtils;
import com.mss.android.domain.models.*;

public class DatabaseHelper extends OrmLiteSqliteOpenHelper {

	// name of the database file for your application -- change to something appropriate for your app
	private static final String DATABASE_NAME = "mss.db";
	// any time you make changes to your database objects, you may have to increase the database version
	private static final int DATABASE_VERSION = 3;

	public DatabaseHelper(final Context context) {
		super(context, DATABASE_NAME, null, DATABASE_VERSION);
	}

	@Override
	public void onCreate(final SQLiteDatabase db, final ConnectionSource connectionSource) {
		try {
			Log.i(DatabaseHelper.class.getName(), "onCreate");
			TableUtils.createTable(connectionSource, Category.class);
			TableUtils.createTable(connectionSource, Customer.class);
			TableUtils.createTable(connectionSource, ShippingAddress.class);
			TableUtils.createTable(connectionSource, UnitOfMeasure.class);
			TableUtils.createTable(connectionSource, Status.class);
			TableUtils.createTable(connectionSource, Warehouse.class);
			TableUtils.createTable(connectionSource, Product.class);
			TableUtils.createTable(connectionSource, ProductUnitOfMeasure.class);
			TableUtils.createTable(connectionSource, PriceList.class);
			TableUtils.createTable(connectionSource, PriceListLine.class);
			TableUtils.createTable(connectionSource, RouteTemplate.class);
			TableUtils.createTable(connectionSource, RoutePointTemplate.class);
			TableUtils.createTable(connectionSource, Route.class);
			TableUtils.createTable(connectionSource, RoutePoint.class);
			TableUtils.createTable(connectionSource, Order.class);
			TableUtils.createTable(connectionSource, OrderItem.class);
		} catch (java.sql.SQLException e) {
			Log.e(DatabaseHelper.class.getName(), "Can't create database", e);
			throw new RuntimeException(e);
		}
	}

	/**
	* This is called when your application is upgraded and it has a higher version number. This allows you to adjust the various data to
	* match the new version number.
	*/
	@Override
	public void onUpgrade(final SQLiteDatabase db, final ConnectionSource connectionSource, final int oldVersion, final int newVersion) {
		try {
			Log.i(DatabaseHelper.class.getName(), "onUpgrade");		
			TableUtils.dropTable(connectionSource, Category.class, true);
			TableUtils.dropTable(connectionSource, Customer.class, true);
			TableUtils.dropTable(connectionSource, ShippingAddress.class, true);
			TableUtils.dropTable(connectionSource, UnitOfMeasure.class, true);
			TableUtils.dropTable(connectionSource, Status.class, true);
			TableUtils.dropTable(connectionSource, Warehouse.class, true);
			TableUtils.dropTable(connectionSource, Product.class, true);
			TableUtils.dropTable(connectionSource, ProductUnitOfMeasure.class, true);
			TableUtils.dropTable(connectionSource, PriceList.class, true);
			TableUtils.dropTable(connectionSource, PriceListLine.class, true);
			TableUtils.dropTable(connectionSource, RouteTemplate.class, true);
			TableUtils.dropTable(connectionSource, RoutePointTemplate.class, true);
			TableUtils.dropTable(connectionSource, Route.class, true);
			TableUtils.dropTable(connectionSource, RoutePoint.class, true);
			TableUtils.dropTable(connectionSource, Order.class, true);
			TableUtils.dropTable(connectionSource, OrderItem.class, true);
			// after we drop the old databases, we create the new ones
			onCreate(db, connectionSource);
		} catch (java.sql.SQLException e) {
			Log.e(DatabaseHelper.class.getName(), "Can't drop databases", e);
			throw new RuntimeException(e);
		}
	}

	private Dao<Customer, Integer> customerDao = null;	
	public Dao<Customer, Integer> getCustomerDao() throws SQLException, java.sql.SQLException {
		if (this.customerDao == null) {
			this.customerDao = getDao(Customer.class);
		}
		return this.customerDao;
	}
	
	private Dao<Category, Integer> categoryDao = null;	
	public Dao<Category, Integer> getCategoryDao() throws SQLException, java.sql.SQLException {
		if (this.categoryDao == null) {
			this.categoryDao = getDao(Category.class);
		}
		return this.categoryDao;
	}
	
	private Dao<Order, Integer> orderDao = null;	
	public Dao<Order, Integer> getOrderDao() throws SQLException, java.sql.SQLException {
		if (this.orderDao == null) {
			this.orderDao = getDao(Order.class);
		}
		return this.orderDao;
	}
	
	private Dao<OrderItem, Integer> orderItemDao = null;	
	public Dao<OrderItem, Integer> getOrderItemDao() throws SQLException, java.sql.SQLException {
		if (this.orderItemDao == null) {
			this.orderItemDao = getDao(OrderItem.class);
		}
		return this.orderItemDao;
	}
	
	private Dao<Customer, Integer> customerDao = null;	
	public Dao<Customer, Integer> getCustomerDao() throws SQLException, java.sql.SQLException {
		if (this.customerDao == null) {
			this.customerDao = getDao(Customer.class);
		}
		return this.customerDao;
	}
	
	private Dao<Customer, Integer> customerDao = null;	
	public Dao<Customer, Integer> getCustomerDao() throws SQLException, java.sql.SQLException {
		if (this.customerDao == null) {
			this.customerDao = getDao(Customer.class);
		}
		return this.customerDao;
	}
	
	private Dao<Customer, Integer> customerDao = null;	
	public Dao<Customer, Integer> getCustomerDao() throws SQLException, java.sql.SQLException {
		if (this.customerDao == null) {
			this.customerDao = getDao(Customer.class);
		}
		return this.customerDao;
	}
	
	private Dao<Customer, Integer> customerDao = null;	
	public Dao<Customer, Integer> getCustomerDao() throws SQLException, java.sql.SQLException {
		if (this.customerDao == null) {
			this.customerDao = getDao(Customer.class);
		}
		return this.customerDao;
	}
	
	private Dao<Customer, Integer> customerDao = null;	
	public Dao<Customer, Integer> getCustomerDao() throws SQLException, java.sql.SQLException {
		if (this.customerDao == null) {
			this.customerDao = getDao(Customer.class);
		}
		return this.customerDao;
	}
	
	private Dao<Customer, Integer> customerDao = null;	
	public Dao<Customer, Integer> getCustomerDao() throws SQLException, java.sql.SQLException {
		if (this.customerDao == null) {
			this.customerDao = getDao(Customer.class);
		}
		return this.customerDao;
	}
	
	private Dao<Customer, Integer> customerDao = null;	
	public Dao<Customer, Integer> getCustomerDao() throws SQLException, java.sql.SQLException {
		if (this.customerDao == null) {
			this.customerDao = getDao(Customer.class);
		}
		return this.customerDao;
	}
	
	private Dao<Customer, Integer> customerDao = null;	
	public Dao<Customer, Integer> getCustomerDao() throws SQLException, java.sql.SQLException {
		if (this.customerDao == null) {
			this.customerDao = getDao(Customer.class);
		}
		return this.customerDao;
	}


	/**
	* Close the database connections and clear any cached DAOs.
	*/
	@Override
	public void close() {
		super.close();
		this.customerDao = null;
		this.categoryDao = null;
		this.orderDao = null;
	}
}