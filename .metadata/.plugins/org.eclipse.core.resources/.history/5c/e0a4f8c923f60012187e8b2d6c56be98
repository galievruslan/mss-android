package com.mss.application;

import java.util.Calendar;
import java.util.List;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.view.ActionMode;
import com.actionbarsherlock.view.ActionMode.Callback;
import com.actionbarsherlock.view.MenuInflater;
import com.j256.ormlite.android.apptools.OpenHelperManager;
import com.mss.application.fragments.RouteFragment;
import com.mss.application.fragments.RouteFragment.OnRoutePointSelectedListener;
import com.mss.application.fragments.RoutePointFragment;
import com.mss.domain.models.RoutePoint;
import com.mss.domain.services.RouteService;
import com.mss.infrastructure.ormlite.DatabaseHelper;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.Loader;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.CompoundButton;
import android.widget.DatePicker;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;

public class RouteActivity extends SherlockFragmentActivity implements OnRoutePointSelectedListener, Callback, LoaderCallbacks<List<RoutePoint>> {

private static final String TAG = RouteActivity.class.getSimpleName();
private static final boolean DEBUG = BuildConfig.DEBUG && false;

/// Note-specific Loader id
private static final int LOADER_ID_NOTES = 0;

private PaneMode mPaneMode;
private ActionMode mActionMode;
private RoutePointAdapter mRoutePointAdapter;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

setContentView(R.layout.activity_route);

mRoutePointAdapter = new RoutePointAdapter(this);
getSupportLoaderManager().initLoader(LOADER_ID_NOTES, null, this);

// Instantiate the proper PaneMode logic helper

if (getResources().getBoolean(R.bool.dual_pane))
	mPaneMode = new DualPaneMode(this);
else
	mPaneMode = new OnePaneMode(this);

RouteFragment fragmentRoute = getRouteFragment();
fragmentRoute.addOnRoutePointSelectedListener(this);

mPaneMode.onCreate(savedInstanceState);
}

protected RouteFragment getRouteFragment() {
return (RouteFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_route);
}

protected RoutePointFragment getRoutePointFragment() {
return (RoutePointFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_route_point);
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
super.onActivityResult(requestCode, resultCode, data);

getSupportLoaderManager().restartLoader(LOADER_ID_NOTES, null, this);

switch (requestCode) {
case RouteActivity.REQUEST_SHOW_NOTE:
	// We are coming back from the NoteActivity, so we should select
	// a proper note from the list

	if (data != null) {
		long noteId = data.getLongExtra(RouteActivity.EXTRA_NOTE_ID, 0l);
		if (noteId != 0l) {
			showNoteById(noteId);
		}
	}
	break;
case NoteEditActivity.REQUEST_EDIT_NOTE:
	// We are coming back from the NoteEditActivity, so let's update the
	// content of the fragment

	RoutePointFragment f = getRoutePointFragment();
	if (f != null) {
		f.updateContent(mRoutePointAdapter.getItemById(f.getNoteId()));
	}

	break;
default:
	break;
}
}

@Override
public boolean onCreateOptionsMenu(Menu menu) {
MenuInflater inflater = getSupportMenuInflater();
inflater.inflate(R.menu.menu_list, menu);

return true;
}

/**
* {@inheritDoc}
*/
@Override
public boolean onOptionsItemSelected(MenuItem item) {

// Note that we handle Edit and Delete items here, even if they were
// added by the NoteFragment.

switch (item.getItemId()) {
case R.id.menu_item_add:
	mPaneMode.onAddNote();
	return true;
case R.id.menu_item_delete:
	RoutePointFragment frag = getRoutePointFragment();
	if (frag != null) {
		mRoutePointAdapter.delete(getRoutePointFragment().getRoutePoint());
		getSupportLoaderManager().restartLoader(LOADER_ID_NOTES, null, this);
	}

	return true;
default:
	return false;
}
}

@Override
public void onRoutePointSelected(RoutePoint routePoint, int position, long id) {
if (DEBUG)
	Log.d(TAG, "onNoteSelected: " + position);

if (mActionMode != null)
	mActionMode.finish();

mPaneMode.onRoutePointSelected(routePoint, position, id);
}

public void onNoteDeleted(int position) {

}

@Override
public boolean onCreateActionMode(ActionMode mode, Menu menu) {
MenuInflater inflater = getSupportMenuInflater();
inflater.inflate(R.menu.action_mode_list, menu);

mActionMode = mode;

return true;
}

@Override
public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
return false;
}

@Override
public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
switch (item.getItemId()) {
case R.id.action_item_delete:
	FragmentManager manager = getSupportFragmentManager();
	NoteListFragment frag = (NoteListFragment) manager.findFragmentById(R.id.fragment_notelist);
	NoteAdapter adapter = (NoteAdapter) frag.getListAdapter();
	adapter.deleteSelected();

	getSupportLoaderManager().restartLoader(LOADER_ID_NOTES, null, this);

	mode.finish();
	return true;
default:
	return false;
}
}

@Override
public void onDestroyActionMode(ActionMode mode) {
mActionMode = null;

FragmentManager manager = getSupportFragmentManager();
RouteFragment frag = (RouteFragment) manager.findFragmentById(R.id.fragment_route);
RoutePointAdapter adapter = (RoutePointAdapter) frag.getListAdapter();
}

@Override
public Loader<List<RoutePoint>> onCreateLoader(int id, Bundle args) {
switch (id) {
case LOADER_ID_NOTES:
	return new RouteLoader(this);
default:
	return null;
}
}

@Override
public void onLoadFinished(Loader<List<RoutePoint>> loader, List<RoutePoint> data) {
switch (loader.getId()) {
case LOADER_ID_NOTES:
	mPaneMode.onLoadFinished(loader, data);
	break;
default:
	break;
}
}

@Override
public void onLoaderReset(Loader<List<RoutePoint>> loader) {
mRoutePointAdapter.swapData(null);
}

public void showNoteById(long id) {
	RoutePoint n = mRoutePointAdapter.getItemById(id);
mPaneMode.onNoteSelected(n, -1, id);
}

public void showNoteByPosition(int position) {
if (mNoteAdapter.getCount() > 0) {
	int nextPosition = position;
	if (nextPosition >= mNoteAdapter.getCount()) {
		// Decrease the position since we don't have enough notes in the list

		nextPosition = mNoteAdapter.getCount() - 1;
	}
	NoteFragment f = NoteFragment.newInstance((Note) mNoteAdapter.getItem(nextPosition));

	getSupportFragmentManager().beginTransaction().replace(R.id.fragment_note, f).commitAllowingStateLoss();
} else {
	// There are no notes, remove the side fragment

	NoteFragment f = getNoteFragment();
	if (f != null) {
		getSupportFragmentManager().beginTransaction().remove(f).commitAllowingStateLoss();
	}
}
}

/**
* Hides the logic that depends on the pane mode
*/
private static abstract class PaneMode {

protected final WeakReference<AbsNoteActivity> mWeakActivity;

public PaneMode(AbsNoteActivity activity) {
	mWeakActivity = new WeakReference<AbsNoteActivity>(activity);
}

/**
 * Called by the {@link AbsNoteActivity#onCreate(Bundle)} method
 */
public abstract void onCreate(Bundle savedInstanceState);

/**
 * Called by the {@link AbsNoteActivity#onNoteSelected(Note, int, long)} method
 * 
 * @param n
 *            the {@link Note} instance that was selected
 * @param position
 *            the position on the list
 * @param id
 *            {@link Note} id
 */
public abstract void onNoteSelected(Note n, int position, long id);

/**
 * Called when a {@link Note} was added.
 */
public abstract void onAddNote();

/**
 * Called when the {@link Loader} finishes its work
 * 
 * @param loader the {@link Loader} object
 * @param data returned list of {@link Note Notes}
 */
public void onLoadFinished(Loader<List<Note>> loader, List<Note> data) {
	NoteAdapter noteAdapter = mWeakActivity.get().mNoteAdapter;
	noteAdapter.swapData(data);
	mWeakActivity.get().getNoteListFragment().setListAdapter(noteAdapter);
}
}

/**
* One-pane mode specific logic
*/
private static class OnePaneMode extends PaneMode {

public OnePaneMode(AbsNoteActivity activity) {
	super(activity);
}

@Override
public void onCreate(Bundle savedInstanceState) {
	AbsNoteActivity activity = mWeakActivity.get();

	if (savedInstanceState == null) {
		// Activity is being recreated
	}

	NoteFragment f = (NoteFragment) activity.getSupportFragmentManager().findFragmentById(R.id.fragment_note);
	if (f != null) {
		// We don't need the NoteFragment in OnePaneMode so we get rid of it

		activity.getSupportFragmentManager().beginTransaction().remove(f).commit();
	}
}

@Override
public void onNoteSelected(Note n, int position, long id) {
	AbsNoteActivity activity = mWeakActivity.get();

	Intent intent = new Intent(activity, NoteActivity.class);
	intent.putExtra(activity.getString(R.string.key_id), id);
	activity.startActivityForResult(intent, NoteActivity.REQUEST_SHOW_NOTE);
}

@Override
public void onAddNote() {
	AbsNoteActivity activity = mWeakActivity.get();

	Intent intent = new Intent(activity, NoteEditActivity.class);
	activity.startActivityForResult(intent, 0);
}
}

/**
* Dual-pane mode specific logic
*/
private static class DualPaneMode extends PaneMode {

public DualPaneMode(AbsNoteActivity activity) {
	super(activity);
}

/**
 * In dual pane mode we want to show a NoteFragment if there's one in the database
 */
@Override
public void onCreate(Bundle savedInstanceState) {
	if (savedInstanceState == null) {
		// Activity is being recreated
	}
}

/**
 * Swaps NoteFragments in dual-pane mode.
 */
@Override
public void onNoteSelected(Note n, int position, long id) {
	AbsNoteActivity activity = mWeakActivity.get();

	NoteFragment currentFragment = activity.getNoteFragment();

	if (currentFragment == null || currentFragment.getNoteId() != id) {
		// Let's swap the NoteFragment with the selected one

		activity.getSupportFragmentManager().beginTransaction()
				.replace(R.id.fragment_note, NoteFragment.newInstance(n)).commit();
	}
}

@Override
public void onAddNote() {
	AbsNoteActivity activity = mWeakActivity.get();

	Intent intent = new Intent(activity, NoteEditActivity.class);
	activity.startActivityForResult(intent, 0);
}

@Override
public void onLoadFinished(Loader<List<Note>> loader, List<Note> data) {
	super.onLoadFinished(loader, data);

	AbsNoteActivity activity = mWeakActivity.get();

	// In DualPaneMode we want to show a side NoteFragment
	// Remember that we can not do FragmentTransactions in onLoadFinished

	activity.showNoteByPosition(activity.getNoteListFragment().getLastClickedPosition());
}
}
}
