package com.mss.application;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.mss.domain.models.RoutePoint;
import com.mss.infrastructure.ormlite.DatabaseHelper;

import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.TextView;

public class RoutePointEditActivity extends SherlockFragmentActivity implements LoaderCallbacks<RoutePoint> {

	private static final String TAG = RoutePointEditActivity.class.getSimpleName();

	public static final int REQUEST_EDIT_ROUTE_POINT = 5;

	public static final int LOADER_ID_ROUTE_POINT = 0;

	private RoutePoint mRoutePoint;
	private EditText mName;
	private EditText mAddress;

	private DatabaseHelper mHelper;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_route_point_edit);

		mTitle = (EditText) findViewById(R.id.label_name);
		mText = (EditText) findViewById(R.id.label_address);

		long id = getIntent().getLongExtra(getString(R.string.key_id), NoteActivity.NOTE_ID_NEW);

		if (id != NoteActivity.NOTE_ID_NEW) {
			Bundle args = new Bundle();
			args.putLong(KEY_NOTE_ID, id);
			getSupportLoaderManager().initLoader(LOADER_ID_NOTE, args, this);
		}

		mHelper = OpenHelperManager.getHelper(this, NoteOrmLiteSqliteOpenHelper.class);
		mDao = mHelper.getRuntimeExceptionDao(Note.class);

		// Let's show the application icon as the Up button

		if (getSupportActionBar() != null)
			getSupportActionBar().setDisplayHomeAsUpEnabled(true);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getSupportMenuInflater().inflate(R.menu.menu_noteedit, menu);

		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			Intent upIntent = new Intent(this, AbsNoteActivity.class);
			if (NavUtils.shouldUpRecreateTask(this, upIntent)) {
				TaskStackBuilder.from(this).addNextIntent(upIntent).startActivities();
				finish();
			} else {
				NavUtils.navigateUpTo(this, upIntent);
			}
			return true;
		case R.id.menu_item_save:
			if (mNote == null) {
				mNote = new Note(mTitle.getText().toString(), mText.getText().toString());
			} else {
				mNote.setTitle(mTitle.getText().toString());
				mNote.setText(mText.getText().toString());
			}

			onNoteSaved(mNote);

			return true;
		default:
			return false;
		}
	}

	public void onNoteSaved(Note n) {
		CreateOrUpdateStatus status = mDao.createOrUpdate(n);

		if (!status.isCreated() && !status.isUpdated()) {
			Log.e(TAG, "Unable to create or update note: " + n);
		}

		finish();
	}

	@Override
	public Loader<Note> onCreateLoader(int id, Bundle args) {
		switch (id) {
		case LOADER_ID_NOTE:
			long noteId = args.getLong(KEY_NOTE_ID);

			return new NoteLoader(this, noteId);
		default:
			return null;
		}
	}

	@Override
	public void onLoadFinished(Loader<Note> loader, Note data) {
		mNote = data;

		if (mNote != null) {
			mTitle.setText(mNote.getTitle());
			mText.setText(mNote.getText());
		}
	}

	@Override
	public void onLoaderReset(Loader<Note> loader) {
		mNote = null;
	}
}